题目：将字符串转化成数字    https://www.cnblogs.com/grandyang/p/4125537.html
注意：1、只有 ' ' 情况被考虑是空白字符
     2、假设存储范围是32bit, 整数范围是：[−231,  231 − 1]； 如果越界，则返回 INT_MAX (231 − 1) or INT_MIN (−231)
     
 字符串转为整数是很常用的一个函数，由于输入的是字符串，所以需要考虑的情况有很多种。有一篇文章是关于验证一个字符串是否为数字的，参见 Valid Number。
 在那篇文章中，详细的讨论了各种情况，包括符号，自然数，小数点的出现位置，判断他们是否是数字。个人以为这道题也应该有这么多种情况。
 但是这题只需要考虑数字和符号的情况：

1. 若字符串开头是空格，则跳过所有空格，到第一个非空格字符，如果没有，则返回0.

2. 若第一个非空格字符是符号 +/-，则标记 sign 的真假，这道题还有个局限性，那就是在 c++ 里面，+-1 和-+1 都是认可的，都是 -1，而在此题里，则会返回0.

3. 若下一个字符不是数字，则返回0. 完全不考虑小数点和自然数的情况，不过这样也好，起码省事了不少。

4. 如果下一个字符是数字，则转为整形存下来，若接下来再有非数字出现，则返回目前的结果。

5. 还需要考虑边界问题，如果超过了整型数的范围，则用边界值替代当前值。   

example：
Example 1:

Input: "42"
Output: 42

Example 2:

Input: "   -42"
Output: -42
Explanation: The first non-whitespace character is '-', which is the minus sign.
             Then take as many numerical digits as possible, which gets 42.
Example 3:

Input: "4193 with words"
Output: 4193
Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.
Example 4:

Input: "words and 987"
Output: 0
Explanation: The first non-whitespace character is 'w', which is not a numerical 
             digit or a +/- sign. Therefore no valid conversion could be performed.

Example 5:

Input: "-91283472332"
Output: -2147483648
Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer.
             Thefore INT_MIN (−231) is returned.
             
public class Solution{
    public int atoi(String str){
       //首先判断字符串是否为空，若是，直接返回0；
     if(str.isEmpty()) return 0;
     int sign = 1, base = 0, i = 0, n = str.length();
     //判断字符串的第一个字符是否空格，往后走；
     while(i< n && str.charAt(i) == ' ') ++i;
  
     //标记整数的符号：n = str.length();
     if(i < n && (str.charAt(i) =='+' || str.charAt(i) =='-')){
         sign = str.charAt(i++) =='+' ? 1:-1;
     }    
     
     //字符串数字转化
     while (i < n && str.charAt(i) >= '0' && str.charAt(i) <= '9') {
            if (base > Integer.MAX_VALUE / 10 || (base == Integer.MAX_VALUE / 10 && str.charAt(i) - '0' > 7)) {
                return (sign == 1) ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }
            base = 10 * base + (str.charAt(i++) - '0');
        }
        return base * sign;
    }
}             
